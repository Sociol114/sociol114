{
  "hash": "c8af41c804547c12a755186d44d7cba3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data transformation\"\n---\n\n\n\n\n> This topic is covered on Jan 16. If you want to download a full .qmd instead of copying codes from the website, you can use [data_transformation_exercise.qmd](../assets/data_transformation_exercise.qmd).\n\nThis exercise examines how income inequality has changed over time in the U.S. We will measure inequality by the 10th, 50th, and 90th percentiles of wage and salary income from 1962 to 2022.^[Thanks to past TA Abby Sachar for designing the base of this exercise.] The goal is to produce a graph like this one.\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](data_transformation_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n\n## Prepare your R environment\n\nIn RStudio, create a Quarto document. Save it in your working directory. Run the following code to load two packages we will use. If you do not have these packages, first run `install.packages(\"tidyverse\")` and `install.packages(\"haven\")` to install the packages.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(haven)\n```\n:::\n\n{{< video https://www.youtube.com/embed/eqcC7Aag80Y >}}\n\n\n\n\n\n\n## Data access\n\nThis exercise uses data from the [Current Population Survey](https://cps.ipums.org/cps/), provided via IPUMS. We have two versions of the data:\n\n* simulated data made available to you via the course website\n* actual data, for which you will register with the data provider\n\nIn lecture, we will use simulated data. In discussion, your TA will walk through the process to access the actual data. You will ultimately need to access the actual data for future assignments in this class.\n\n### Accessing simulated data\n\nThe [simulated data](../data/simulated_cps_data.dta) are designed to have the same statistical properties as the actual data. To access the simulated data, copy the following line of code into your R script and run it. This line loads the data and stores it in an object called `cps_data`.\n\n<!-- The [`haven`](https://haven.tidyverse.org/) package allows us to load data in the `.dta` format. Use [`read_dta()`](https://haven.tidyverse.org/reference/read_dta.html)) and store the data in an object called `cps_data`. By default, these data are stored in a [`tibble`](https://tibble.tidyverse.org/). -->\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncps_data <- read_dta(\"https://soc114.github.io/data/simulated_cps_data.dta\")\n```\n:::\n\n\n\n\n### Accessing actual data\n\nAccessing the actual data is important for future assignments. You may also use these data in your project. Here are instructions to access the data:\n\n1. Register for an account at [cps.ipums.org](https://cps.ipums.org/cps/)\n2. Log in\n3. Click \"Get Data\"\n4. Add the following variables to your cart: [`incwage`](https://cps.ipums.org/cps-action/variables/incwage), [`educ`](https://cps.ipums.org/cps-action/variables/educ), [`wkswork2`](https://cps.ipums.org/cps-action/variables/wkswork2), [`age`](https://cps.ipums.org/cps-action/variables/age), [`asecwt`](https://cps.ipums.org/cps-action/variables/asecwt)\n5. Add the 1962--2023 ASEC samples to your cart. Exclude the basic monthly samples\n6. Create a data extract\n\t- Select cases to only download people ages 30--45\n\t- Choose to download in Stata (.dta) format\n7. Submit your extract and download the data!\n\nStore your data in a **working directory**: a folder on your computer that will hold the data for this exercise. Load the data using the `read_dta` function in the `haven` package.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncps_data <- read_dta(\"your_downloaded_file_name.dta\")\n```\n:::\n\n\n\n\n::: {.callout-tip}\n- Change the file name to the name of the file you downloaded\n- If R says the file does not exist in your current working directory, you may need to [set your working directory](https://support.posit.co/hc/en-us/articles/200711843-Working-Directories-and-Workspaces-in-the-RStudio-IDE) by clicking Session -> Set Working Directory -> To Source File Location on a Mac or Tools -> Change Working Directory on Windows.\n:::\n\n\n\n\n{{< video https://www.youtube.com/embed/JTsFJtlLOrY >}}\n\n\n\n\n\n\n<!-- {{< video https://www.youtube.com/embed/LjO15pvVmNg >}} -->\n  \n## Explore the data\n\nType `cps_data` in the console. Some columns such as [`educ`](https://cps.ipums.org/cps-action/variables/educ#codes_section) have a numeric code and a label. The code is how IPUMS has stored the data. The label is what the code means. You can always find more documentation explaining the labels on the [IPUMS-CPS website](https://cps.ipums.org/cps-action/variables/educ#codes_section).\n\n<!-- {{< video https://www.youtube.com/embed/f9IeokvW8HM >}} -->\n\n## filter() to cases of interest\n\n> In this step, you will use [`filter()`](https://dplyr.tidyverse.org/reference/filter.html) to convert your `cps_data` object to a new object called `filtered`.\n\nThe [`filter()`](https://dplyr.tidyverse.org/reference/filter.html) function keeps only rows in our dataset that correspond to those we want to study. The [examples](https://dplyr.tidyverse.org/reference/filter.html#ref-examples) on the documentation page are especially helpful. The [R4DS section](https://r4ds.hadley.nz/data-transform#filter) is also helpful.\n\nHere are two ways to use [`filter()`](https://dplyr.tidyverse.org/reference/filter.html) to restrict to people working 50+ weeks per year. One way is to call the `filter()` function and hand it two arguments\n\n- `.data = cps_data` is the dataset\n- `year == 1962` is a logical condition coded `TRUE` for observations in 1962\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(.data = cps_data, year == 1962)\n```\n:::\n\n\n\n\nThe result of this call is a [`tibble`](https://tibble.tidyverse.org/) with only the observations from 1962. Another way to do the same operation is with the pipe operator `|>`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncps_data |>\n  filter(year == 1962)\n```\n:::\n\n\n\n\nThis approach begins with the data set `cps_data`. The pipe operator `|>` hands this data set on as the first argument to the [`filter()`](https://dplyr.tidyverse.org/reference/filter.html) function in the next line. As before, the second argument is the logical condition `year == 1962`.\n\nThe piping approach is often preferable because it reads like a sentence: begin with data, then filter to cases with a given condition. The pipe is also useful \n\nThe pipe operator `|>` takes what is on the first line and hands it on as the first argument to the function in the next line. This reads in a sentence: begin with the `cps_data` tibble and then [`filter()`](https://dplyr.tidyverse.org/reference/filter.html) to cases with `year == 1962`. The pipe can also string together many operations, with comments allowed between them:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncps_data |>\n  # Restrict to 1962\n  filter(year == 1962) |>\n  # Restrict to ages 40-44\n  filter(age >= 40 & age <= 44)\n```\n:::\n\n\n\n\n**Your turn.** Begin with the `cps_data` dataset. Filter to\n\n- people working 50+ weeks per year (check documentation for [`wkswork2`](https://cps.ipums.org/cps-action/variables/WKSWORK2#codes_section)) \n- valid report of [`incwage`](https://cps.ipums.org/cps-action/variables/INCWAGE) greater than 0 and less than 99999998\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code answer\"}\nfiltered <- cps_data |>\n  # Subset to cases working full year\n  filter(wkswork2 == 6) |>\n  # Subset to cases with valid income\n  filter(incwage > 0 & incwage < 99999998)\n```\n:::\n\n\n\n\n::: {.callout-note}\nFiltering can be a dangerous business! For example, above we dropped people with missing values of income. But what if the lowest-income people refuse to answer the income question? We often have no choice but to filter to those with valid responses, but you should always read the documentation to be sure you understand who you are dropping and why.\n\n\n\n\n{{< video https://www.youtube.com/embed/OE2gE_3DLf8 >}}\n\n\n\n\n\n\n\n## group_by() and summarize() for subpopulation summaries\n\n> In this step, you will use `group_by()` and `summarize()` to convert your `mutated` object to a new object called `summarized`.\n\nEach row in our dataset is a person. We want a dataset where each row is a year. To get there, we will group our data by year and then summarize each group by a set of summary statistics.\n\n### Introducing summarize() with the sample mean\n\nTo see how `summarize()` works, let's first summarize the sample mean income within each year. The input has one row per person. The result has one row per group. For each year, it records the sample mean income.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfiltered |>\n  group_by(year) |>\n  summarize(mean_income = mean(incwage))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 62 × 2\n    year mean_income\n   <dbl>       <dbl>\n 1  1962       6383.\n 2  1963       5831.\n 3  1964       6688.\n 4  1965       6066.\n 5  1966       6438.\n 6  1967       6745.\n 7  1968       7244.\n 8  1969       8465.\n 9  1970       9198.\n10  1971       8490.\n# ℹ 52 more rows\n```\n\n\n:::\n:::\n\n{{< video https://www.youtube.com/embed/loOJDf1aF-w >}}\n\n\n\n\n\n\n### Using summarize() with weighted quantiles\n\nInstead of the mean, we plan to use three other summary statistics: the 10th, 50th, and 90th percentiles of income. We also want to incorporate the sampling weights provided with the Current Population Survey, in order to summarize the population instead of the sample.\n\nWe will use the `wtd.quantile` function to create weighted quantiles. This function is available in the `Hmisc` package. If you don't have that package, install it with `install.packages(\"Hmisc\")`. Using the `Hmisc` package is tricky, because it has some functions with the same name as functions that we use in the `tidyverse`. Instead of loading the whole package, we will only load the functions we are using at the time we use them. Whenever we want to calculate a weighted quantile, we will call it with the code `packagename::functionname()` which in this case is `Hmisc::wtd.quantile()`.\n\nThe `wtd.quantile` function will take three arguments:\n\n* `x` is the variable to be summarized\n* `weights` is the variable containing sampling weights\n* `probs` is the probability cutoffs for the quantiles. For the 10th, 50th, and 90th percentiles we want 0.1, 0.5, and 0.9.\n\nThe code below produces weighted quantile summaries.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarized <- filtered |>\n  group_by(year) |>\n  summarize(\n    p10 = Hmisc::wtd.quantile(x = incwage, weights = asecwt, probs = 0.1),\n    p50 = Hmisc::wtd.quantile(x = incwage, weights = asecwt, probs = 0.5),\n    p90 = Hmisc::wtd.quantile(x = incwage, weights = asecwt, probs = 0.9),\n    .groups = \"drop\"\n  )\n```\n:::\n\n{{< video https://www.youtube.com/embed/IOMbo_3ynKU >}}\n\n\n\n\n\n\n## pivot_longer() to reshape data\n\n> In this step, you will use `pivot_longer()` to convert your `summarized` object to a new object called `pivoted`. We first explain why, then explain the task.\n\nWe ultimately want to make a `ggplot()` where income values are placed on the y-axis. We want to plot the 10th, 50th, and 90th percentiles along this axis, distinguished by color. We need them all in one colun! But currently, they are in three columns.\n\nHere is the task. How our data look:\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 62 × 4\n   year   p10   p50    p90\n  <dbl> <dbl> <dbl>  <dbl>\n1  1962 1826. 4460. 11733.\n2  1963 1770. 4484. 11934.\n# ℹ 60 more rows\n```\n\n\n:::\n:::\n\n\n\n    \nHere we want our data to look:\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 186 × 3\n   year quantity income\n  <dbl> <chr>     <dbl>\n1  1962 p10       1826.\n2  1962 p50       4460.\n3  1962 p90      11733.\n4  1963 p10       1770.\n5  1963 p50       4484.\n6  1963 p90      11934.\n# ℹ 180 more rows\n```\n\n\n:::\n:::\n\n\n\n\nThis way, we can use `year` for the x-axis, `quantity` for color, and `value` for the y-axis.\n\nUse [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html) to change the first data frame to the second.\n\n- Use the `cols` argument to tell it which columns will disappear\n- Use the `names_to` argument to tell R that the names of those\n  variables will be moved to a column called `quantity`\n- Use the `values_to` argument to tell R that the values of those\n  variables will be moved to a column called `income`\n  \nIf you get stuck, see how we did it at the [end of this page](#all-together).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code answer\"}\npivoted <- summarized %>%\n  pivot_longer(\n    cols = c(\"p10\",\"p50\",\"p90\"),\n    names_to = \"quantity\",\n    values_to = \"income\"\n  )\n```\n:::\n\n{{< video https://www.youtube.com/embed/DRuPHsX6GlM >}}\n\n\n\n\n\n\n## left_join() an inflation adjustment\n\n> In this step, you will use [`left_join()`](https://r4ds.hadley.nz/joins#sec-mutating-joins) to merge in an inflation adjustment\n\nA dollar in 1962 bought a lot more than a dollar in 2022. We will adjust for inflation using the [Consumer Price Index](https://www.bls.gov/cpi/), which tracks the cost of a standard basket of market goods. We already took this index to create a file [`inflation.csv`](../data/inflation.csv),\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninflation <- read_csv(\"https://soc114.github.io/data/inflation.csv\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 62 × 2\n   year inflation_factor\n  <dbl>            <dbl>\n1  1962            10.1 \n2  1963             9.95\n3  1964             9.82\n# ℹ 59 more rows\n```\n\n\n:::\n:::\n\n\n\n\nThe `inflation_factor` tells us that \\$1 in 1962 could buy about as much as \\$10.10 in 2023. To take a 1962 income and report it in 2023 dollars, we should multiple it by 10.1. We need to join our data\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 186 × 3\n   year quantity income\n  <dbl> <chr>     <dbl>\n1  1962 p10       1826.\n2  1962 p50       4460.\n3  1962 p90      11733.\n# ℹ 183 more rows\n```\n\n\n:::\n:::\n\n\n\ntogether with `inflation.csv` by the linking variable `year`. Use [`left_join()`](https://r4ds.hadley.nz/joins#sec-mutating-joins) to merge `inflation_factor` onto the dataset `pivoted`. Below is a hypothetical example for the structure.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Hypothetical example\njoined <- data_A |>\n  left_join(\n    data_B,\n    by = join_by(key_variable_in_A_and_B)\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code answer\"}\njoined <- pivoted |>\n  left_join(\n    inflation,\n    by = join_by(year)\n  )\n```\n:::\n\n{{< video https://www.youtube.com/embed/EptsO1HLBs4 >}}\n\n\n\n\n\n\n## mutate() to adjust for inflation\n\n> In this step, you will use [`mutate()`](https://r4ds.hadley.nz/data-transform#sec-mutate) to multiple `income` by the `inflation_factor`\n\nThe [`mutate()`](https://r4ds.hadley.nz/data-transform#sec-mutate) function modifies columns. It can overwrite existing columns or create new columns at the right of the data set. The new variable is some transformation of the old variables.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Hypothetical example\nold_data |>\n  mutate(new_variable = old_variable_1 + old_variable_2)\n```\n:::\n\n\n\n\nUse [`mutate()`](https://r4ds.hadley.nz/data-transform#sec-mutate) to modify `income` so that it takes the values `income * inflation_factor`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code answer\"}\nmutated <- joined |>\n  mutate(income = income * inflation_factor)\n```\n:::\n\n{{< video https://www.youtube.com/embed/H0vxvCYDuzU >}}\n\n\n\n\n\n\n## ggplot() to visualize\n\nNow make a `ggplot()` where\n\n- `year` is on the x-axis\n- `income` is on the y-axis\n- `quantity` is denoted by color\n\nDiscuss. What do you see in this plot?\n\n\n\n\n\n\n\n\n\n## All together\n\nPutting it all together, we have a pipeline that goes from data to the plot.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncps_data |>\n  # Subset to cases working full year\n  filter(wkswork2 == 6) |>\n  # Subset to cases with valid income\n  filter(incwage > 0 & incwage < 99999998) |>\n  # Produce summaries\n  group_by(year) |>\n  summarize(\n    p10 = Hmisc::wtd.quantile(x = incwage, weights = asecwt, probs = 0.1),\n    p50 = Hmisc::wtd.quantile(x = incwage, weights = asecwt, probs = 0.5),\n    p90 = Hmisc::wtd.quantile(x = incwage, weights = asecwt, probs = 0.9\n    ),\n    .groups = \"drop\"\n  ) |>\n  pivot_longer(\n    cols = c(\"p10\",\"p50\",\"p90\"),\n    names_to = \"quantity\",\n    values_to = \"income\"\n  ) |>\n  # Join data for inflation adjustment\n  left_join(\n    read_csv(\"https://soc114.github.io/data/inflation.csv\"),\n    by = join_by(year)\n  ) |>\n  # Apply the inflation adjustment\n  mutate(income = income * inflation_factor) |>\n  # Produce a ggplot\n  ggplot(aes(x = year, y = income, color = quantity)) +\n  geom_line() +\n  xlab(\"Year\") +\n  scale_y_continuous(name = \"Annual Wage and Salary Income\\n(2023 dollars)\",\n                     labels = scales::label_dollar()) +\n  scale_color_discrete(name = \"Percentile of\\nDistribution\",\n                       labels = function(x) paste0(gsub(\"p\",\"\",x),\"th\")) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](data_transformation_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n{{< video https://www.youtube.com/embed/fgQe7BaZEMQ >}}\n\n\n\n\n\n\n## Want to do more?\n\nIf you have finished and want to do more, you could\n\n- incorporate the [`educ`](https://cps.ipums.org/cps-action/variables/educ#codes_section) variable in your plot. You might want to group by those who do and do not hold college degrees, perhaps using [`facet_grid()`](https://ggplot2.tidyverse.org/reference/facet_grid.html)\n- try [`geom_histogram()`](https://ggplot2.tidyverse.org/reference/geom_histogram.html) for people's incomes in a specific year\n- explore [IPUMS-CPS](https://cps.ipums.org/) for other variables and begin your own visualization\n\n\n",
    "supporting": [
      "data_transformation_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}